{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","helpers/getFilteredTodos.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","newTodos","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","searchParams","filteredTodos","useMemo","serchParams","queryNormalize","trim","toLowerCase","statusNormalize","length","title","includes","completed","getFilteredTodos","className","map","todosClassName","id","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","e","filterActions","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoading","setIsLoading","error","setError","user","setUser","useEffect","userId","catch","finally","color","href","email","name","App","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08e2fd0e.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = { type: 'query/SET', payload: string };\ntype ClearQueryAction = { type: 'query/CLEAR' };\ntype SetStatusAction = { type: 'status/SET', payload: string };\n\ntype Actions = SetQueryAction | ClearQueryAction | SetStatusAction;\n\ntype State = {\n  query: string;\n  status: string;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'query/CLEAR',\n});\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus, clearQuery };\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Actions,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return {\n        query: action.payload,\n        status: state.status,\n      };\n    case 'query/CLEAR':\n      return {\n        query: '',\n        status: state.status,\n      };\n    case 'status/SET':\n      return {\n        query: state.query,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadAction = { type: 'todos/LOAD', payload: Todo[] };\n\ntype Actions = LoadAction;\n\nconst load = (newTodos: Todo[]): LoadAction => ({\n  type: 'todos/LOAD',\n  payload: newTodos,\n});\n\nexport const actions = { load };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Actions,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getFilteredTodos } from '../../helpers/getFilteredTodos';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const searchParams = useAppSelector(state => state.filter);\n\n  const filteredTodos = useMemo(() => {\n    return getFilteredTodos(todos, searchParams);\n  }, [searchParams, todos]);\n\n  const setTodo = (\n    newTodo: Todo,\n  ) => dispatch(currentTodoActions.setTodo(newTodo));\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredTodos.map(todo => {\n                const todosClassName = !todo.completed\n                  ? 'has-text-danger'\n                  : 'has-text-success';\n\n                const handleEyeClick = () => {\n                  setTodo(todo);\n                };\n\n                return (\n                  <tr data-cy=\"todo\" key={todo.id}>\n                    <td className=\"is-vcentered\">{todo.id}</td>\n                    <td className=\"is-vcentered\">\n                      {\n                        todo.completed && (\n                          <span className=\"icon\" data-cy=\"iconCompleted\">\n                            <i className=\"fas fa-check\" />\n                          </span>\n                        )\n                      }\n\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={todosClassName}>{todo.title}</p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={handleEyeClick}\n                      >\n                        <span className=\"icon\">\n                          {currentTodo?.id === todo.id\n                            ? (<i className=\"far fa-eye-slash\" />\n                            ) : (\n                              <i className=\"far fa-eye\" />\n                            )}\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  serchParams: { query: string, status: string },\n): Todo[] {\n  const { query, status } = serchParams;\n\n  const queryNormalize = query.trim().toLowerCase();\n  const statusNormalize = status.trim().toLowerCase();\n\n  const newTodos = queryNormalize.length\n    ? todos.filter(todo => todo.title.toLowerCase().includes(queryNormalize))\n    : todos;\n\n  switch (statusNormalize) {\n    case 'active':\n      return newTodos.filter(todo => !todo.completed);\n    case 'completed':\n      return newTodos.filter(todo => todo.completed);\n    default:\n      return newTodos;\n  }\n}\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleStatusChange = (\n    e: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(filterActions.setStatus(e.target.value));\n  };\n\n  const handleQueryChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    dispatch(filterActions.setQuery(e.target.value));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={handleStatusChange}\n            data-cy=\"statusSelect\"\n            value={status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleQueryChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear-query\"\n              onClick={handleQueryClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nconst ERROR_MESSAGE = 'Failed to load users, try again later';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [user, setUser] = useState<User | null>(null);\n\n  const handleCloseButtonClick = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => setError(ERROR_MESSAGE))\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {error && (\n        <span style={{ color: 'red' }}>{error}</span>\n      )}\n\n      {!isLoading && !error && currentTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close-modal\"\n              onClick={handleCloseButtonClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nconst ERROR_MESSAGE = 'Failed to load the todos, try again later';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(todosFromServer => dispatch(todosActions.load(todosFromServer)))\n      .catch(() => setError(ERROR_MESSAGE))\n      .finally(() => setIsLoading(false));\n  }, [dispatch]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              { isLoading && <Loader /> }\n              { (!isLoading && !error) && <TodoList /> }\n              { error && (\n                <span style={{ color: 'red' }}>{error}</span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      { currentTodo && <TodoModal /> }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}